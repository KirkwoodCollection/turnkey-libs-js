name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint -- --max-warnings 1000
      
    - name: Check formatting
      run: npm run format:check
      
    - name: Run type check
      run: npm run typecheck
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Library
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build library
      run: npm run build
      
    - name: Check for mock data in build output
      run: npm run clear-mock-data
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Analyze bundle size
      run: |
        echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
        echo "| Build | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Analyze different builds
        for build in dist/umd/turnkey-libs.min.js dist/esm/index.js dist/cjs/index.js; do
          if [ -f "$build" ]; then
            name=$(basename $(dirname $build))/$(basename $build)
            size=$(du -h "$build" | cut -f1)
            gzipped=$(gzip -c "$build" | wc -c | numfmt --to=iec)
            echo "| $name | $size | $gzipped |" >> $GITHUB_STEP_SUMMARY
          fi
        done

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for known security issues
      run: |
        # Check for common security anti-patterns
        echo "üîç Checking for security issues..."
        
        # Check for hardcoded secrets (basic check)
        if grep -r "password\s*=\|secret\s*=\|key\s*=" src/ --include="*.ts" --include="*.tsx" | grep -v "MOCK" | grep -v "test" | grep -v "example" | grep -v "keyframes" | grep -v "keyof"; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found"
          exit 1
        else
          echo "‚úÖ No obvious hardcoded secrets found"
        fi
        
        # Check for eval usage
        if grep -r "eval\|Function(" src/ --include="*.ts" --include="*.tsx"; then
          echo "‚ùå Dangerous eval() usage found"
          exit 1
        else
          echo "‚úÖ No eval() usage found"
        fi